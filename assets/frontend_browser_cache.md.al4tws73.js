import{_ as e,e as s,o as a,Z as i}from"./chunks/framework.tCCUWFfl.js";const E=JSON.parse('{"title":"浏览器缓存","description":"浏览器缓存方式以及区别","frontmatter":{"title":"浏览器缓存","description":"浏览器缓存方式以及区别","category":"browser","tags":["浏览器","缓存","强制缓存","协商缓存"]},"headers":[],"relativePath":"frontend/browser/cache.md","filePath":"frontend/browser/cache.md","lastUpdated":1686303485000}'),n={name:"frontend/browser/cache.md"},o=i(`<h1 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h1><p>浏览器缓存(<code>Brower Caching</code>)是指浏览器将之前请求的资源（如页面、图片、样式、脚本等）存储在本地，以便在用户再次访问同一资源时能够直接从本地读取而不需要重新请求。</p><p>浏览器缓存的主要特点包括：</p><ol><li><p>减少网络请求：浏览器缓存可以减少网络请求，从而缩短页面加载时间，提升用户体验。</p></li><li><p>减少服务器压力：通过缓存，浏览器可以减少向服务器发送请求，降低服务器负载。</p></li><li><p>降低带宽成本：通过缓存，浏览器可以减少网络流量，降低带宽成本。</p></li><li><p>优化页面性能：由于缓存能够减少网络请求，所以能够提高页面性能，减少页面加载时间，从而提升用户体验。</p></li><li><p>保证数据一致性：浏览器缓存遵循 <code>HTTP</code> 协议中的缓存机制，保证了资源的一致性和有效性，避免了因为缓存而导致数据不一致的问题。</p></li></ol><p>总之，浏览器缓存是一种简单而有效的优化网站性能的方法，可以提升用户的访问体验，降低服务器负载，并降低带宽成本。</p><h2 id="缓存方式" tabindex="-1">缓存方式 <a class="header-anchor" href="#缓存方式" aria-label="Permalink to &quot;缓存方式&quot;">​</a></h2><p>浏览器缓存主要有两类：缓存协商和彻底缓存，也有称之为协商缓存和强缓存。</p><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h3><p>强缓存是指浏览器在请求资源时，通过判断缓存是否过期来决定是否使用缓存的一种方式。当浏览器第一次请求资源时，服务器返回的响应头中会包含 <code>Cache-Control</code> 和 <code>Expires</code> 字段，用于控制资源的缓存。浏览器在接收到资源后，会将其保存到本地，并在下一次请求该资源时，先判断本地缓存是否过期，如果未过期，则直接从本地缓存读取资源，不再向服务器发起请求。 下面是强缓存的实现方式。</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code></a></li></ol><p><code>Cache-Control</code> 是 <code>http1.1</code> 提供的缓存控制机制，通过设置响应头部的 <code>Cache-Control</code> 字段，可以指定缓存的最长时间，单位为秒。比如，设置 <code>Cache-Control: max-age=3600</code> 表示资源可以被缓存 <code>1</code> 小时。浏览器再次请求该资源时，会判断缓存是否过期，如果未过期，直接从缓存中获取资源。</p><p>常见的 <code>Cache-Control</code> 指令有：</p><ul><li><p><code>max-age</code>：缓存的最长时间，单位为秒。</p></li><li><p><code>public</code>：资源可以被任意缓存，包括客户端和 <code>CDN</code> 等公共缓存。</p></li><li><p><code>private</code>：资源只能被客户端缓存，不允许 <code>CDN</code> 等公共缓存。</p></li><li><p><code>no-cache</code>：不使用本地缓存。在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证 (协商缓存验证)。</p></li><li><p><code>no-store</code>：禁止缓存，每次请求都要向服务器发送请求。</p></li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-asoJl" id="tab-Rf8GnrX" checked="checked"><label for="tab-Rf8GnrX">缓存请求指令</label><input type="radio" name="group-asoJl" id="tab-GpzS5N8"><label for="tab-GpzS5N8">缓存响应指令</label></div><div class="blocks"><div class="language-md vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control: max-age=&lt;seconds&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control: max-stale[</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">=&lt;seconds&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control: min-fresh=&lt;seconds&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-transform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: only-if-cached</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: must-revalidate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: no-transform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: public</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: private</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: proxy-revalidate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control: max-age=&lt;seconds&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-control: s-maxage=&lt;seconds&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div></div><ol start="2"><li><code>Expires</code></li></ol><p><code>Expires</code> 是 <code>HTTP/1.0</code> 提供的缓存控制机制，通过设置响应头部的 <code>Expires</code> 字段，可以指定一个绝对时间，表示资源的缓存过期时间。比如，设置 <code>Expires: Sat, 26 Jul 2025 05:00:00 GMT</code> 表示资源可以被缓存到 <code>2025年7月26日5点</code>。与 <code>Cache-Control</code> 不同的是，<code>Expires</code> 是一个绝对时间，不受本地时间影响。但是，由于浏览器与服务器可能存在时钟不一致的情况，因此该方式已经逐渐被 <code>Cache-Control</code> 所替代。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>Cache-Control</code> 与 <code>Expires</code> 可以在服务端配置同时启用，同时启用的时候 <code>Cache-Control</code> 优先级高。使用 <code>Cache-Control</code> 比 <code>Expires</code> 更为常用。通过设置 <code>Cache-Control</code> 字段，可以更加灵活地控制缓存的过期时间，同时也避免了时钟不一致的问题。</p></div><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h3><p>协商缓存是浏览器缓存机制的一种实现方式，用于在强缓存失效时向服务器发起请求验证资源是否发生变化，以决定是否使用缓存的一种方式。协商缓存主要包括两个部分：请求头和响应头。</p><p>当浏览器判断本地缓存已经过期时，会向服务器发起请求，服务器返回的响应头中会包含 <code>Last-Modified</code> 和 <code>ETag</code> 字段，用于标识资源的最后修改时间和唯一标识。浏览器在接收到资源后，会将其保存到本地，并在下一次请求该资源时，先向服务器发起请求，请求头中包含上一次响应头中返回的 <code>Last-Modified</code> 和 <code>ETag</code> 值，服务器会根据这些值判断该资源是否有更新，如果没有更新，则返回 <code>304</code> 状态码，并告诉浏览器可以从本地缓存中获取该资源；如果有更新，则返回新的资源内容和响应头，并将其保存到本地缓存。</p><p>协商缓存主要有两种方式：<code>Last-Modified/If-Modified-Since</code> 和 <code>ETag/If-None-Match</code>。</p><ol><li><code>Last-Modified/If-Modified-Since</code></li></ol><ul><li><p><code>Last-Modified</code> 是响应头，表示服务器端资源的最后修改时间。比如：<code>Last-Modified: Tue, 15 Jun 2021 08:18:25 GMT</code>。浏览器第一次请求资源时，服务器会将 <code>Last-Modified</code> 头部信息一并返回给浏览器，浏览器会将其缓存起来。下次请求时，浏览器会将该信息作为 <code>If-Modified-Since</code> 的值发送给服务器，服务器会根据该值判断资源是否有修改，如果没有修改，则返回 <code>304 Not Modified</code> 状态码，告诉浏览器可以直接使用缓存，否则返回新的资源。</p></li><li><p><code>If-Modified-Since</code> 是请求头，表示上次请求时的 <code>Last-Modified</code> 时间，服务器会将该值与当前资源的最后修改时间进行比较，以判断资源是否有更新，如果没有更新，就返回 <code>304 Not Modified</code> 状态码，不返回 <code>Last-Modified</code>。</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>If-Modified-Since</code> 只可以用在 <code>GET</code> 或 <code>HEAD</code> 请求中。</p></div><ol start="2"><li><code>ETag/If-None-Match</code></li></ol><ul><li><p><code>ETag</code> 是响应头，表示服务器端资源的唯一标识符，比如：<code>ETag: W/&quot;1234567890&quot;</code>。浏览器第一次请求资源时，服务器会将 <code>ETag</code> 头部信息一并返回给浏览器，浏览器会将其缓存起来。下次请求时，浏览器会将该信息作为 <code>If-None-Match</code> 的值发送给服务器，服务器会根据该值判断资源是否有修改，如果没有修改，则返回 <code>304 Not Modified</code> 状态码，告诉浏览器可以直接使用缓存，否则返回新的资源。</p></li><li><p><code>If-None-Match</code> 是请求头，表示上次请求时的 <code>ETag</code> 值，服务器会将该值与当前资源的唯一标识符进行比较，以判断资源是否有更新，如果没有更新，就返回 <code>304 Not Modified</code> 状态码。</p></li></ul><blockquote><p>被浏览器缓存的文件会有不同的缓存来源，包括 <code>from memory cache</code> 和 <code>from disk cache</code>，前者指缓存来自内存，后者指缓存来自硬盘。决定缓存到内存还是硬盘的正是 <code>Etag</code> 字段。如果响应头有 <code>Etag</code> 字段，那么浏览器就会将本次缓存写入硬盘中。</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>当与 <code>If-Modified-Since</code> 一同使用的时候，<code>If-None-Match</code> 优先级更高（假如服务器支持的话）。</p></div><p>相比于 <code>Last-Modified/If-Modified-Since</code>，<code>ETag/If-None-Match</code> 更加精确，因为 <code>ETag</code> 可以基于内容生成，而 <code>Last-Modified</code> 只能以时间作为依据。但是 <code>ETag</code> 的生成会消耗一定的计算资源，因此在实际应用中需要考虑性能开销。</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><table><thead><tr><th>缓存类型</th><th>获取资源形式</th><th>状态码</th><th>发送请求到服务器</th></tr></thead><tbody><tr><td>强缓存</td><td>从缓存取</td><td>200（from cache）</td><td>否，直接从缓存取</td></tr><tr><td>协商缓存</td><td>从缓存取</td><td>304（Not Modified）</td><td>否，通过服务器来告知缓存是否可用</td></tr></tbody></table><h2 id="缓存过程" tabindex="-1">缓存过程 <a class="header-anchor" href="#缓存过程" aria-label="Permalink to &quot;缓存过程&quot;">​</a></h2><p>浏览器在第一次请求发生后，再次请求时：</p><ul><li><p>浏览器会先获取该资源缓存的 <code>header</code> 信息，根据其中的 <code>Expires</code> 和 <code>Cache-control</code> 判断是否命中强缓存，若命中则直接从缓存中获取资源，包括缓存的 <code>header</code> 信息，本次请求不会与服务器进行通信；</p></li><li><p>如果没有命中强缓存，浏览器会发送请求到服务器，该请求会携带第一次请求返回的有关缓存的 <code>header</code> 字段信息（<code>Last-Modified/IF-Modified-Since</code>、<code>Etag/IF-None-Match</code> ）,由服务器根据请求中的相关 <code>header</code> 信息来对比结果是否命中协商缓存，若命中，则服务器返回新的响应 <code>header</code> 信息更新缓存中的对应 <code>header</code> 信息，但是并不返回资源内容，它会告知浏览器可以直接从缓存获取；否则返回最新的资源内容。</p></li></ul><h2 id="不缓存" tabindex="-1">不缓存 <a class="header-anchor" href="#不缓存" aria-label="Permalink to &quot;不缓存&quot;">​</a></h2><h3 id="no-store" tabindex="-1">no-store <a class="header-anchor" href="#no-store" aria-label="Permalink to &quot;no-store&quot;">​</a></h3><p>强制缓存的 <code>Cache-control</code> 的指令 <code>no-store</code>，作用是不存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。<code>Cache-Control</code> 是通用消息头字段，既可以用于请求头，也可以用于响应头。</p><p>使用：</p><ol><li>关闭缓存</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Cache-Control: no-store</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>缓存静态资源</li></ol><p>对于应用程序中不会改变的文件，你通常可以在发送响应头前添加积极缓存。这包括例如由应用程序提供的静态文件，例如图像，<code>CSS</code> 文件和 <code>JavaScrip</code> t文件。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Cache-Control: public, max-age=31536000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>需要重新验证</li></ol><p>指定 <code>no-cache</code> 或 <code>max-age=0, must-revalidate</code> 表示客户端可以缓存资源，每次使用缓存资源前都必须重新验证其有效性。这意味着每次都会发起 <code>HTTP</code> 请求，但当缓存内容仍有效时可以跳过 <code>HTTP</code> 响应体的下载。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Cache-Control: no-cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 或者</span></span>
<span class="line"><span>Cache-Control: max-age=0, must-revalidate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果服务器关闭或失去连接，<code>Cache-Control: max-age=0</code> 可能会造成使用缓存。</p></div><h3 id="增加版本号" tabindex="-1">增加版本号 <a class="header-anchor" href="#增加版本号" aria-label="Permalink to &quot;增加版本号&quot;">​</a></h3><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../js/jquery.min.js?version=1.7.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="使用随机数" tabindex="-1">使用随机数 <a class="header-anchor" href="#使用随机数" aria-label="Permalink to &quot;使用随机数&quot;">​</a></h3><p>既然在文件后面添加指纹可以让浏览器重新获取资源，那么我们可以在后面拼接随机数或者时间戳，这样也可以达到相同的目的，还省去了手动更改版本号的步骤。</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/resource/options/myjs.js?randomId=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(script);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>浏览器发现文件名有更改，会重新获取静态资源，达到了不缓存文件的目的。</p><h3 id="html禁用缓存" tabindex="-1">HTML禁用缓存 <a class="header-anchor" href="#html禁用缓存" aria-label="Permalink to &quot;HTML禁用缓存&quot;">​</a></h3><p><code>HTML</code> 也可以禁用缓存， 即在页面的 <code>head</code> 标签中加入 <code>meta</code> 标签。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache, no-store, must-revalidate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>虽能禁用缓存，但只有部分浏览器支持，而且由于代理不解析 <code>HTML</code> 文档，故代理服务器也不支持这种方式。该方法不适用于特定文件不缓存的要求。</p></div>`,57),l=[o];function t(d,c,p,r,h,k){return a(),s("div",null,l)}const b=e(n,[["render",t]]);export{E as __pageData,b as default};
