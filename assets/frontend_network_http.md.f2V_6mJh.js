import{_ as e,e as o,o as d,Z as c}from"./chunks/framework.tCCUWFfl.js";const H=JSON.parse('{"title":"HTTP","description":"介绍什么是HTTP","frontmatter":{"title":"HTTP","description":"介绍什么是HTTP","category":"network","tags":["network","HTTP"]},"headers":[],"relativePath":"frontend/network/http.md","filePath":"frontend/network/http.md","lastUpdated":1686303485000}'),l={name:"frontend/network/http.md"},i=c(`<h1 id="http和https" tabindex="-1">HTTP和HTTPS <a class="header-anchor" href="#http和https" aria-label="Permalink to &quot;HTTP和HTTPS&quot;">​</a></h1><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p><code>HTTP</code> 是一种用于传输超文本的协议，是互联网上应用最为广泛的协议之一。</p><p><strong>基本概念</strong></p><ul><li><p><code>HTTP</code> 是一个无状态协议：即每个请求之间是没有关联的，每个请求都是独立的。</p></li><li><p><code>HTTP</code> 是基于请求和响应的：客户端发送请求给服务器，服务器返回响应给客户端。</p></li><li><p><code>HTTP</code> 是文本协议：<code>HTTP</code> 使用文本格式进行通信，请求和响应都是由头部和主体两部分组成的文本格式。</p></li></ul><p><strong>工作原理</strong></p><ul><li><p>客户端发起请求：客户端使用 <code>HTTP</code> 协议向服务器发送请求，请求包含请求方法、请求 <code>URL</code>、请求头和请求主体等信息。</p></li><li><p>服务器响应请求：服务器接收到客户端的请求后，进行处理并返回响应，响应包含状态码、响应头和响应主体等信息。</p></li><li><p>连接关闭：完成请求和响应之后，客户端和服务器之间的连接会被关闭。</p></li></ul><p><code>HTTP</code> 的常见请求方法：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td></tr><tr><td>POST</td><td>提交数据</td></tr><tr><td>PUT</td><td>更新资源</td></tr><tr><td>DELETE</td><td>删除资源</td></tr><tr><td>HEAD</td><td>获取响应头信息</td></tr><tr><td>OPTIONS</td><td>获取服务器支持的请求方法等信息</td></tr></tbody></table><p>总的来说，<code>HTTP</code> 是一种简单、可靠、可扩展的协议，它在互联网中扮演着重要的角色，被广泛应用于 <code>Web</code> 开发、移动应用、<code>API</code> 接口等领域。</p><h2 id="get与post的区别" tabindex="-1">GET与POST的区别 <a class="header-anchor" href="#get与post的区别" aria-label="Permalink to &quot;GET与POST的区别&quot;">​</a></h2><p><code>GET</code> 和 <code>POST</code> 是 <code>HTTP</code> 协议中常用的两种请求方法，它们之间的主要区别如下：</p><ol><li>参数传递方式不同</li></ol><ul><li><p><code>GET</code> 请求：参数是通过 <code>URL</code> 传递的，即将参数拼接在 <code>URL</code> 后面。</p></li><li><p><code>POST</code> 请求：参数是通过请求体传递的，即将参数放在请求体中，请求头中会包含 <code>Content-Type</code> 字段来说明请求体中的数据格式。</p></li></ul><ol start="2"><li>参数传递大小限制不同</li></ol><ul><li><p><code>GET</code> 请求：由于参数是通过 <code>URL</code> 传递的，因此传递的参数大小有限制，通常不超过 <code>2KB</code>。</p></li><li><p><code>POST</code> 请求：由于参数是通过请求体传递的，因此传递的参数大小没有限制。</p></li></ul><ol start="3"><li>安全性不同</li></ol><ul><li><p><code>GET</code> 请求：参数是暴露在 <code>URL</code> 中的，因此在请求过程中容易被拦截、篡改或缓存，不适合传递敏感信息。</p></li><li><p><code>POST</code> 请求：参数是放在请求体中的，相对于 <code>GET</code> 请求更安全，适合传递敏感信息。</p></li></ul><ol start="4"><li>缓存机制不同</li></ol><ul><li><p><code>GET</code> 请求：浏览器会缓存 <code>GET</code> 请求的结果，下次请求相同的 <code>URL</code> 时，直接从缓存中获取，不会重新请求服务器。</p></li><li><p><code>POST</code> 请求：浏览器<strong>不</strong>会缓存 <code>POST</code> 请求的结果，每次请求都会向服务器发送请求。</p></li></ul><ol start="5"><li>应用场景不同</li></ol><ul><li><p><code>GET</code> 请求：通常用于获取数据，如搜索、分页等。</p></li><li><p><code>POST</code> 请求：通常用于提交数据，如登录、注册等。</p></li></ul><p>总之，<code>GET</code> 和 <code>POST</code> 请求各有优缺点，需要根据实际业务需求选择合适的请求方法。</p><h2 id="http报文组成" tabindex="-1">HTTP报文组成 <a class="header-anchor" href="#http报文组成" aria-label="Permalink to &quot;HTTP报文组成&quot;">​</a></h2><p><code>HTTP</code> 报文是 <code>HTTP</code> 协议中的核心概念之一，包括两部分：请求报文和响应报文。</p><blockquote><p>HTTP报文是一个文本格式的信息，它包含了请求或响应所需要的全部信息，使得客户端和服务器端能够有效地进行通信和数据传输。</p></blockquote><h3 id="请求报文" tabindex="-1">请求报文 <a class="header-anchor" href="#请求报文" aria-label="Permalink to &quot;请求报文&quot;">​</a></h3><p>请求报文包括请求行、请求头、请求体三部分，格式如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span></span>
<span class="line"><span>&lt;headers&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中：</p><ul><li><p>请求行：包括请求方法、请求 <code>URL</code> 和协议版本，用空格分隔；</p></li><li><p>请求头：包括多个键值对，每个键值对用冒号分隔，多个键值对之间用回车符和换行符分隔；</p></li><li><p>请求体：用于携带请求参数和数据，请求体可以为空。</p></li></ul><h3 id="响应报文" tabindex="-1">响应报文 <a class="header-anchor" href="#响应报文" aria-label="Permalink to &quot;响应报文&quot;">​</a></h3><p>响应报文也包括三部分：状态行、响应头和响应体，格式如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;</span></span>
<span class="line"><span>&lt;headers&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中：</p><ul><li><p>状态行：包括协议版本、状态码和状态消息，用空格分隔；</p></li><li><p>响应头：包括多个键值对，每个键值对用冒号分隔，多个键值对之间用回车符和换行符分隔；</p></li><li><p>响应体：用于携带响应结果和数据，响应体可以为空。</p></li></ul><h3 id="request-header" tabindex="-1">Request Header <a class="header-anchor" href="#request-header" aria-label="Permalink to &quot;Request Header&quot;">​</a></h3><p><code>Request Header</code>（请求头）是 <code>HTTP</code> 请求报文中的一部分，包含了客户端（浏览器或应用程序）向服务器发送请求时的附加信息，以键值对的形式组织。常见的请求头有：</p><ul><li><code>User-Agent</code>：客户端的类型及版本号</li><li><code>Referer</code>：请求来源的 <code>URL</code></li><li><code>Accept</code>：客户端支持的 <code>MIME</code> 类型</li><li><code>Accept-Language</code>：客户端支持的语言类型</li><li><code>Accept-Encoding</code>：客户端支持的压缩类型</li><li><code>Host</code>：请求的服务器域名</li><li><code>Connection</code>：客户端与服务器之间连接的类型</li><li><code>Cookie</code>：客户端存储的 <code>Cookie</code> 信息</li><li><code>Cache-Control</code>：请求缓存的控制参数</li></ul><p>请求头的作用是提供给服务器更多的信息，以便服务器更好地处理请求。</p><h3 id="response-header" tabindex="-1">Response Header <a class="header-anchor" href="#response-header" aria-label="Permalink to &quot;Response Header&quot;">​</a></h3><p><code>Response Header</code>（响应头）是 <code>HTTP</code> 响应报文中的一部分，包含了服务器对客户端请求的响应信息，以键值对的形式组织。常见的响应头有：</p><ul><li><code>Content-Type</code>：响应内容的 <code>MIME</code> 类型</li><li><code>Content-Length</code>：响应内容的长度</li><li><code>Cache-Control</code>：响应缓存的控制参数</li><li><code>Set-Cookie</code>：服务器要求客户端存储的 <code>Cookie</code> 信息</li><li><code>Location</code>：重定向的 <code>URL</code> 地址</li><li><code>ETag</code>：资源的标识符，用于缓存控制</li><li><code>Last-Modified</code>：资源的最后修改时间，用于缓存控制</li><li><code>Expires</code>：资源的过期时间，用于缓存控制</li></ul><p>响应头的作用是告知客户端服务器对请求的响应情况，以便客户端进行下一步处理。</p><h2 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h2><p><code>HTTPS</code> 是 <code>HTTP</code> 协议的一种安全版本，通常使用 <code>SSL/TLS</code> 协议进行加密。它在数据传输的过程中使用了公钥加密和私钥解密的方式来保护数据的机密性和完整性。<code>HTTPS</code> 协议在数据传输过程中，采用了多种加密技术，包括对称密钥加密、非对称密钥加密和消息摘要算法等。这些技术保证了数据在传输过程中不会被黑客窃取或篡改。</p><p><strong>作用</strong></p><p>使用 <code>HTTPS</code> 协议可以防止中间人攻击、身份伪装、数据篡改、数据窃听等问题。通过数字证书，可以验证网站的真实性，确保通信双方的身份，保障用户的隐私和安全。</p><h3 id="http-和-https-的区别" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-和-https-的区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别&quot;">​</a></h3><p><code>HTTP</code> 和 <code>HTTPS</code> 都是应用层协议，但 <code>HTTPS</code> 在 <code>HTTP</code> 的基础上增加了安全层，使得数据在传输过程中更加安全可靠。下面是 <code>HTTP</code> 和 <code>HTTPS</code> 的区别：</p><ol><li><p><code>HTTP</code> 使用明文传输数据，而 <code>HTTPS</code> 通过 <code>SSL/TLS</code> 加密数据传输；</p></li><li><p><code>HTTP</code> 的默认端口是 <code>80</code>，<code>HTTPS</code> 的默认端口是 <code>443</code>；</p></li><li><p><code>HTTP</code> 在通信过程中没有身份验证，而 <code>HTTPS</code> 通过 <code>SSL/TLS</code> 建立身份验证机制，可以防止身份被冒充；</p></li><li><p><code>HTTP</code> 数据传输速度更快，因为 <code>HTTPS</code> 增加了加密、解密和身份验证等额外的步骤，需要消耗更多的计算资源和时间；</p></li><li><p><code>HTTP</code> 使用的证书是申请成本较低的 <code>DV</code>（Domain Validation）证书，而 <code>HTTPS</code> 使用的证书是成本较高的 <code>EV</code>（Extended Validation）证书，可以提供更高的安全性和可信度。</p></li></ol><p>总之，<code>HTTPS</code> 比 <code>HTTP</code> 更加安全可靠，但在性能方面会有一定的损失。因此，在对安全性要求较高的场合，应该使用 <code>HTTPS</code>。</p><h3 id="https-协议的优缺点" tabindex="-1">HTTPS 协议的优缺点 <a class="header-anchor" href="#https-协议的优缺点" aria-label="Permalink to &quot;HTTPS 协议的优缺点&quot;">​</a></h3><p><code>HTTPS</code> 协议相比 <code>HTTP</code> 协议，具有以下优点和缺点：</p><p><strong>优点：</strong></p><ol><li><p>安全性高：<code>HTTPS</code> 协议利用 <code>SSL/TLS</code> 加密传输数据，能够有效地保障数据的安全性，可以防止数据被窃取、篡改、劫持等攻击。</p></li><li><p>防止中间人攻击：<code>HTTPS</code> 采用了证书机制，能够有效地防止中间人攻击。</p></li><li><p>提高网站的信誉度：<code>HTTPS</code> 协议能够保证网站的真实性和完整性，让用户更加信任网站，从而提高了网站的信誉度。</p></li><li><p>支持更多的浏览器和搜索引擎：现在的浏览器和搜索引擎都支持 <code>HTTPS</code> 协议，使用 <code>HTTPS</code> 协议能够让网站更好的展示在搜索结果中，提高曝光率。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>加密、解密过程会消耗更多的计算资源和时间，会降低服务器的性能，增加服务器的负担。</p></li><li><p>证书需要向 <code>CA</code> 机构购买，成本较高，不是所有的网站都能够承受。</p></li><li><p><code>HTTPS</code> 协议对缓存的支持不够好，会导致网站的访问速度较慢，需要额外的服务器资源来支持 <code>HTTPS</code> 的加密和解密过程。</p></li><li><p><code>HTTPS</code> 协议无法缓存静态文件，对于一些大文件的下载，<code>HTTPS</code> 的效率并不是很高。</p></li></ol><p>综上所述，<code>HTTPS</code> 协议虽然有一些缺点，但是其安全性和信誉度优势明显，对于一些需要保障数据安全的网站和交易场景，采用 <code>HTTPS</code> 协议是必要的。</p><h2 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h2><p><code>HTTP</code> 的状态码用于表示服务器处理请求的结果:</p><ul><li><code>1xx</code>：信息提示，表示请求已被接受，需要继续处理。</li><li><code>2xx</code>：成功，表示请求已被成功处理和接受。</li><li><code>3xx</code>：重定向，表示需要进行进一步操作才能完成请求。</li><li><code>4xx</code>：客户端错误，表示请求包含错误或无法被处理。</li><li><code>5xx</code>：服务器错误，表示服务器在尝试处理请求时发生了错误。</li></ul><h3 id="常见状态码" tabindex="-1">常见状态码 <a class="header-anchor" href="#常见状态码" aria-label="Permalink to &quot;常见状态码&quot;">​</a></h3><ul><li><code>200</code> OK：客户端请求成功</li><li><code>301</code> Moved Permanently：所请求的页面已经永久重定向至新的 <code>URL</code></li><li><code>302</code> Found：所请求的页面已经临时重定向至新的 <code>URL</code></li><li><code>304</code> Not Modified：未修改。</li><li><code>403</code> Forbidden：对请求页面的访问被禁止</li><li><code>404</code> Not Found：请求资源不存在</li><li><code>500</code> Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</li><li><code>503</code> Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</li></ul><h3 id="更多状态码" tabindex="-1">更多状态码 <a class="header-anchor" href="#更多状态码" aria-label="Permalink to &quot;更多状态码&quot;">​</a></h3><ul><li><p><code>1xx</code>（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p><ul><li><code>100</code>：继续，服务器已经接收到请求头，并且客户端应该继续发送请求体（通常用于 <code>POST</code> 请求）。</li><li><code>101</code>：切换协议，请求者已要求服务器切换协议，服务器已确认并准备切换</li></ul></li><li><p><code>2xx</code>（成功）表示成功处理了请求的状态码</p><ul><li><code>200</code>：成功，服务器已经成功处理了请求</li><li><code>201</code>：已创建，请求成功并且服务器创建了新的资源</li><li><code>202</code>：已接受，服务器已接受请求，但尚未处理</li><li><code>203</code>：非授权信息，服务器已经成功处理了请求，但返回的信息可能来自另一来源</li><li><code>204</code>：无内容，服务器成功处理了请求，但没有返回任何内容</li><li><code>205</code>：重置内容，服务器成功处理了请求，但没有返回任何内容</li></ul></li><li><p><code>3xx</code>（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p><ul><li><code>300</code>：多种选择，针对请求，服务器可执行多种操作。服务器可根据请求者（<code>user agent</code>）选择一项操作，或提供操作列表供请求者选择</li><li><code>301</code>：永久移动，请求的网页已永久移动到新位置。服务器返回此响应（对 <code>GET</code> 或 <code>HEAD</code> 请求的响应）时，会自动将请求者转到新位置</li><li><code>302</code>：临时移动，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li><code>303</code>：查看其它位置，请求者应当对不同的位置使用单独的 <code>GET</code> 请求来检索响应时，服务器返回此代码</li><li><code>304</code>：未修改，自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li><li><code>305</code>：使用代理，请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li><li><code>307</code>：临时性重定向，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li></ul></li><li><p><code>4xx</code>（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p><ul><li><code>400</code>：错误请求，服务器不理解请求的语法</li><li><code>401</code>：未授权，请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li><li><code>403</code>：禁止，服务器拒绝请求</li><li><code>404</code>：未找到，服务器找不到请求的网页</li><li><code>405</code>：方法禁用，禁用请求中指定的方法</li><li><code>406</code>：不接受，无法使用请求的内容特性响应请求的网页</li><li><code>407</code>：需要代理授权，此状态码与 <code>401</code>（未授权）类似，但指定请求者应当授权使用代理</li><li><code>408</code>：请求超时，服务器等候请求时发生超时</li><li><code>410</code>：已删除，如果请求的资源已永久删除，服务器就会返回此响应</li><li><code>413</code>：请求实体过大，服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li><li><code>414</code>：请求的 <code>URI</code> 过长，请求的 <code>URI</code>（通常为网址）过长，服务器无法处理</li></ul></li><li><p><code>5xx</code>（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p><ul><li><code>500</code>：服务器内部错误，服务器遇到错误，无法完成请求</li><li><code>501</code>：尚未实施，服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li><li><code>502</code>：错误网关，服务器作为网关或代理，从上游服务器无法收到无效响应</li><li><code>503</code>：服务器不可用，服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li><li><code>504</code>：网关超时，服务器作为网关代理，但是没有及时从上游服务器收到请求</li><li><code>505</code>：<code>HTTP</code> 版本不受支持，服务器不支持请求中所用的 <code>HTTP</code> 协议版本</li></ul></li></ul><h3 id="_304状态码过程" tabindex="-1">304状态码过程 <a class="header-anchor" href="#_304状态码过程" aria-label="Permalink to &quot;304状态码过程&quot;">​</a></h3><ol><li><p>浏览器请求资源时，先检查资源的 <code>Expires</code> 和 <code>Cache-Control</code> 值，如果缓存仍然有效，则直接使用缓存，返回状态码 <code>200</code>，并在响应头中添加 <code>from cache</code> 字样，不会请求数据。</p></li><li><p>如果缓存失效，浏览器发送带有 <code>If-None-Match</code> 和 <code>If-Modified-Since</code> 头的条件请求到服务器，请求头中的 <code>If-None-Match</code> 值是上一次请求返回的 <code>ETag</code> 值，<code>If-Modified-Since</code> 是上一次请求返回的 <code>Last-Modified</code> 值。</p></li><li><p>服务器收到条件请求后，检查资源的 <code>ETag</code> 和 <code>Last-Modified</code> 值是否匹配，如果匹配，则表示资源没有更新，返回状态码 <code>304</code>，告诉浏览器可以直接使用缓存。</p></li><li><p>如果资源已更新，则服务器返回新的资源，状态码为 <code>200</code>，并在响应头中添加新的 <code>ETag</code> 和 <code>Last-Modified</code> 值，浏览器会更新缓存，并在下一次请求中使用新的缓存。</p></li></ol><p>总之，<code>HTTP 304</code> 状态码的过程是一种优化缓存机制的方式，减少网络带宽和服务器负载。通过比较资源的 <code>ETag</code> 和 <code>Last-Modified</code> 值，避免了不必要的数据传输，提高了资源请求的效率。</p><h2 id="http1、http2、http3" tabindex="-1">HTTP1、HTTP2、HTTP3 <a class="header-anchor" href="#http1、http2、http3" aria-label="Permalink to &quot;HTTP1、HTTP2、HTTP3&quot;">​</a></h2><p><code>HTTP</code> (Hypertext Transfer Protocol) 是一种用于客户端和服务器之间进行通信的协议。在过去几十年中，<code>HTTP</code> 已经经历了多次重大更新，其中最重要的三个版本是 <code>HTTP1</code>、<code>HTTP2</code> 和 <code>HTTP3</code> 。它们之间的区别如下：</p><ol><li><p><code>HTTP1</code>：<code>HTTP1.0</code> 最初发布于 <code>1996</code> 年，然后在 <code>1999</code> 年被 <code>HTTP1.1</code> 取代。<code>HTTP1.x </code> 是一种基于文本的协议，使用明文传输数据，不支持请求和响应的多路复用，每个请求都需要建立一个新的 <code>TCP</code> 连接。这导致了一些性能瓶颈，例如延迟和带宽限制。</p></li><li><p><code>HTTP2</code>：<code>HTTP2</code> 在 <code>2015</code> 年发布，是 <code>HTTP1.x</code> 的升级版。它引入了二进制协议，支持请求和响应的多路复用，可以在一个 <code>TCP</code> 连接上同时发送多个请求，降低了延迟和提高了带宽利用率。此外，<code>HTTP2</code> 还支持服务器推送，可以在客户端请求之前将资源推送到客户端缓存，从而提高性能。</p></li><li><p><code>HTTP3</code>：<code>HTTP3</code> 是最新的 <code>HTTP</code> 协议，于 <code>2020</code> 年发布。它基于 <code>QUIC</code>（Quick UDP Internet Connections）协议，使用 <code>UDP</code> 而不是 <code>TCP</code> 来传输数据。由于 <code>UDP</code> 支持更高的并发连接和更低的延迟，<code>HTTP3</code> 可以更快地传输数据，并支持请求和响应的多路复用。此外，<code>HTTP3</code> 还支持 <code>0-RTT</code>（Zero Round Trip Time）握手，可以减少建立连接所需的时间。</p></li></ol><p><strong><code>HTTP1.1</code> 的优点：</strong></p><ul><li><p>兼容性好：<code>HTTP1.1</code> 被广泛支持和采用。</p></li><li><p>可缓存性：<code>HTTP1.1</code> 支持多种缓存技术，可以缓存网页，提高网页加载速度。</p></li><li><p>资源异步加载：使用 <code>HTTP1.1</code> 可以通过在页面中嵌入多个资源链接的方式异步加载资源，提高了页面的并发度和渲染速度。</p></li></ul><p><strong><code>HTTP1.1</code> 的缺点：</strong></p><ul><li><p>队头阻塞：<code>HTTP1.1</code> 使用的是串行的请求和响应方式，如果某个请求响应慢，后续的请求需要等待，会出现队头阻塞的问题。</p></li><li><p>无状态：<code>HTTP1.1</code> 协议本身无状态，需要使用 <code>Cookie</code> 等技术来实现状态管理。</p></li><li><p>头部冗余：<code>HTTP1.1</code> 的头部信息没有压缩，每次请求和响应都需要重复传输相同的头部信息，导致传输数据量增大。</p></li></ul><p><strong><code>HTTP2</code> 的优点：</strong></p><ul><li><p>多路复用：<code>HTTP2</code> 使用二进制协议，支持多路复用，可以在一个连接上同时处理多个请求和响应。</p></li><li><p>首部压缩：<code>HTTP2</code> 使用首部压缩技术，可以减少请求和响应的头部信息传输量，提高了传输效率。</p></li><li><p>服务器推送：<code>HTTP2</code> 支持服务器推送技术，可以在客户端请求前主动向客户端推送相应资源，提高了响应速度和性能。</p></li></ul><p><strong><code>HTTP2</code> 的缺点：</strong></p><ul><li><p>依赖 <code>HTTPS</code>：<code>HTTP2</code> 协议必须依赖 <code>TLS</code> 协议，需要使用 <code>HTTPS</code> 传输数据。</p></li><li><p>突发流量：多路复用可以并发处理多个请求和响应，但也会导致某个请求耗费过多的时间，影响其他请求的响应速度。</p></li><li><p>资源消耗：<code>HTTP2</code> 对于每个连接都需要维护状态，资源消耗较大。</p></li></ul><p><strong><code>HTTP3</code> 的优点：</strong></p><ul><li><p>基于 <code>QUIC</code> 协议：<code>HTTP3</code> 基于 <code>QUIC</code> 协议，具有更好的安全性和传输效率。</p></li><li><p>集成了 <code>TLS</code>：<code>HTTP3</code> 集成了 <code>TLS</code>，保证了数据的安全性。</p></li><li><p>抗干扰：<code>HTTP3</code> 通过使用 <code>UDP</code> 协议，支持快速重传和自适应拥塞控制，抵抗网络干扰。</p></li></ul><p><strong><code>HTTP3</code> 的缺点：</strong></p><ul><li><p>兼容性：<code>HTTP3</code> 的兼容性较差，需要客户端和服务器端都支持 <code>HTTP3</code> 协议。</p></li><li><p>连接建立：<code>HTTP3</code> 协议需要建立多个连接来提高传输效率，增加了连接建立的复杂度。</p></li><li><p>难以调试：<code>HTTP3</code> 的调试工具还不够成熟，调试过程比较困难。</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><p><code>HTTP2</code> 和 <code>HTTP3</code> 是对 <code>HTTP1.1</code> 的升级和改进，不是对 <code>HTTP1.0</code> 的重写。</p></li><li><p>虽然 <code>HTTP1.1</code> 是 <code>HTTP1.0</code> 的改进版本，但 <code>HTTP2</code> 和 <code>HTTP3</code> 是对 <code>HTTP1.1</code> 的更进一步的改进和升级。</p></li><li><p><code>HTTP1.1</code> 相对于 <code>HTTP1.0</code> 的改进主要是在持久连接、管线化、缓存等方面，而 <code>HTTP2</code> 和 <code>HTTP3</code> 则在多路复用、头部压缩、流量控制等方面有了很大的改进。</p></li></ul></div>`,85),t=[i];function T(a,p,n,r,s,P){return d(),o("div",null,t)}const u=e(l,[["render",T]]);export{H as __pageData,u as default};
